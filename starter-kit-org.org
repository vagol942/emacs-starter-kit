#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

** Org-Mode Hook
*** Keybindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\C-n" 'outline-next-visible-heading)
              (local-set-key "\C-p" 'outline-previous-visible-heading)
              (local-set-key "\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+END_SRC

*** Minor mode
#+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook
              (lambda ()
                (org-indent-mode  t)
                (org-bullets-mode t)
                (auto-complete-mode t)
                (linum-mode -1)))
#+END_SRC

** Org-Mode Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "s-p") 'org-export-as-pdf)
  (define-key org-mode-map (kbd "s-l") 'org-export-as-latex)
#+END_SRC

** Org-Mode settings
*** Ellipsis
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "…"
        org-columns-ellipses "…")
#+END_SRC

*** Using ido completing
  #+BEGIN_SRC emacs-lisp
    (setq org-completion-use-ido t)
#+END_SRC

** Code blocks
     :PROPERTIES:
     :CUSTOM_ID: babel
     :END:
  This activates a number of widely used languages, you are encouraged
  to activate more languages using the customize interface for the
  `=org-babel-load-languages=' variable, or with an elisp form like the
  one below.  The customize interface of `=org-babel-load-languages='
  contains an up to date list of the currently supported languages.
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (sh . t)
       (python . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively  t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

** LaTeX hacks
#+BEGIN_SRC emacs-lisp
  (require 'org-latex)
#+END_SRC

*** Defining org-latex classes
#+BEGIN_SRC emacs-lisp :tangle no
  (unless (boundp 'org-export-latex-classes)
    (setq org-export-latex-classes nil))

  (add-to-list 'org-export-latex-classes
               ;; beamer class, for presentations
               '("beamer_teaching"
                 "\\documentclass[t, compress]{beamer}\n
                   \\input{../base/OptionsListingC++.sty}\n
                   \\input{../base/BeamerPackage.sty}\n"
                 ("\\begin{frame}[c, fragile]\\frametitle{%s}"
                  "\\end{frame}"
                  "\\begin{frame}[c, fragile]\\frametitle{%s}"
                  "\\end{frame}")))

  (add-to-list 'org-export-latex-classes
               ;; letter class, for formal letters
               '("letter"
                 "\\documentclass[11pt]{letter}\n
                   \\usepackage[utf8]{inputenc}\n
                   \\usepackage[T1]{fontenc}\n
                   \\usepackage{color}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

*** KOMA/LaTeX script
The following code mainly comes from a [[http://lists.gnu.org/archive/html/emacs-orgmode/2010-07/msg01060.html][thread]] on org-mode mailing list. For some
reasons, =downcase= the heading string induces the remove of =\label{}= (which
is actually fine).
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-export-latex-classes
               '("koma-letter"
                 "%% koma-letter
                  \\documentclass{scrlttr2}
                  \\usepackage{hyperref}
                  [NO-DEFAULT-PACKAGES]"
                 org-scrlttr2-sectioning))
  (defun org-scrlttr2-sectioning (level heading)
    (let ((open "\n\\%s {")
          (close "}"))
      (setq heading (downcase (replace-regexp-in-string "\\s-+" "" heading)))
      (cond
       ((string-equal heading "subject")
        (setq open "\n\\setkomavar{%s} {")
        )
       ((string-equal heading "letter")
        (setq open "\n\\begin{%s} {")
        )
       ((string-equal heading "body")
        (setq open "\n")
        (setq close "\n")
        )
       (t 'ignore))
      (list heading open close open close))
    )
#+END_SRC

The previous code works almost perfectly except that an additional blank line is
added to the =\closing= sentence and the =\end{letter}= is missing. The
following piece of code try to solve this (orginal idea from [[http://lists.gnu.org/archive/html/emacs-orgmode/2009-10/msg00044.html][EricSchulte]]).
#+BEGIN_SRC emacs-lisp
  (defun fix-koma-letter ()
    (save-excursion
      (goto-char (point-min))
      (if (search-forward "koma-letter" nil t 1)
          (progn
            (delete-matching-lines "\maketitle")
            (while (re-search-forward "^\\\\closing" nil t)
              (forward-line 1)
              (move-beginning-of-line nil)
              (delete-region (point) (save-excursion (forward-line 1) (point))))
            (re-search-forward "^\\\\end{document}")
            (forward-line -1)
            (insert "\\end{letter}")))))
  (add-hook 'org-export-latex-final-hook 'fix-koma-letter)
#+END_SRC

*** Add new LATEX_CMD option to choose between =pdflatex= and =xelatex=
From [[http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export][org-faq]]
#+BEGIN_SRC emacs-lisp
  (defun latexmk-cmd ()
    "When exporting from .org with latex, automatically run latex,
       pdflatex, or xelatex as appropriate, using latexmk."
    (let ((texcmd)))
    ;; default command: pdflatex
    (setq texcmd "latexmk -pdf -quiet %f")
    ;; pdflatex -> .pdf
    (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
        (setq texcmd "latexmk -pdf -quiet %f"))
    ;; xelatex -> .pdf
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
        (setq texcmd "latexmk -xelatex -pdf -quiet %f"))
    ;; LaTeX compilation command
    (setq org-latex-to-pdf-process (list texcmd)))

  (add-hook 'org-export-latex-after-initial-vars-hook 'latexmk-cmd)
#+END_SRC

** Prevent editing invisible text
The following setting prevents accidentally editing hidden text when
the point is inside a folded region. This can happen if you are in the
body of a heading and globally fold the org-file with =S-TAB=

I find invisible edits (and undo's) hard to deal with so now I can't
edit invisible text. =C-c C-r= (org-reveal) will display where the point
is if it is buried in invisible text to allow editing again.
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'error)
#+END_SRC

** Automatically renumber footnotes
#+BEGIN_SRC emacs-lisp
  (setq org-footnote-auto-adjust t)
#+END_SRC
** Org fold to store folding state
Stolen from [[https://github.com/dandavison/org-fold][Dan Davison]] git account. Just changing the directory where
the =.fold= file is saved.
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'org)

  (defun org-fold-get-fold-info-file-name ()
    (concat temporary-file-directory "org-fold/" (buffer-name) ".fold"))

  (defun org-fold-save ()
    (save-excursion
      (goto-char (point-min))
      (let (foldstates)
        (unless (looking-at outline-regexp)
          (outline-next-visible-heading 1))
        (while (not (eobp))
          (push (if (some (lambda (o) (overlay-get o 'invisible))
                          (overlays-at (line-end-position)))
                    t)
                foldstates)
          (outline-next-visible-heading 1))
        (with-temp-file (org-fold-get-fold-info-file-name)
          (prin1 (nreverse foldstates) (current-buffer))))))

  (defun org-fold-restore ()
    (save-excursion
      (goto-char (point-min))
      (let* ((foldfile (org-fold-get-fold-info-file-name))
             (foldstates
              (if (file-readable-p foldfile)
                  (with-temp-buffer
                    (insert-file-contents foldfile)
                    (read (current-buffer))))))
        (when foldstates
          (show-all)
          (goto-char (point-min))
          (unless (looking-at outline-regexp)
            (outline-next-visible-heading 1))
          (while (and foldstates (not (eobp)))
            (if (pop foldstates)
                (hide-subtree))
            (outline-next-visible-heading 1))
          (message "Restored saved folding state")))))

  (add-hook 'org-mode-hook 'org-fold-activate)

  (defun org-fold-activate ()
    (org-fold-restore)
    (add-hook 'before-save-hook 'org-fold-save        nil t)
    (add-hook 'auto-save-hook   'org-fold-kill-buffer nil t))

  (defun org-fold-kill-buffer ()
    ;; don't save folding info for unsaved buffers
    (unless (buffer-modified-p)
      (org-fold-save)))
#+END_SRC

** Function to generate all org table
From [[http://article.gmane.org/gmane.emacs.orgmode/64670][Carsten Dominik]]
#+BEGIN_SRC emacs-lisp
  (defun sk-org-send-all-tables ()
     (interactive)
     (org-table-map-tables
        (lambda () (orgtbl-send-table 'maybe))))
#+END_SRC

** Org calendar synchronization with Google Agenda (not used)
#+BEGIN_SRC emacs-lisp :tangle no
  ;; (add-to-list 'load-path (concat starter-kit-lisp-directory "org-caldav"))

  (setq org-caldav-calendar-id "dmpa69a5ajdi54dtl8jsdqcivs@group.calendar.google.com"
        org-caldav-url "https://www.google.com/calendar/dav";
        org-caldav-files '("~/Documents/Org/rdv.org")
        org-caldav-inbox "~/Documents/Org/inbox.org")
#+END_SRC
