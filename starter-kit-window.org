#+TITLE: Starter Kit Window
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Window
** Window default settings
Settings in relation with emacs window behavior[1].
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '(buffer-file-name "%b [%f]" "%b"))

  (tool-bar-mode   -1)
  (scroll-bar-mode -1)
  (menu-bar-mode   -1)
  (tooltip-mode    -1)

  (setq inhibit-startup-screen                t
        inhibit-startup-message               t
        line-number-mode                      t
        column-number-mode                    t
        icomplete-mode                        t
        read-buffer-completion-ignore-case    t
        read-file-name-completion-ignore-case t
        color-theme-is-global                 t
        save-place                            t)
#+END_SRC

** Color themes
*** Emacs24 =deftheme=
Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat starter-kit-dir "themes"))
  (setq custom-safe-themes t)
  ;;(load-theme 'solarized-light t)
#+END_SRC

*** Custom solarized theme
A light variant of the [[https://github.com/bbatsov/solarized-emacs][Solarized]] color theme. The basic idea is to
keep the default solarized theme clean and up-to-date and just change
some small part of it here. There is also some =face= changes for
[[https://github.com/milkypostman/powerline][powerline]] (see [[#powerline][below]]).
#+BEGIN_SRC emacs-lisp
  (require 'solarized)
  (defun sk-solarized-childtheme ()
    (custom-theme-set-faces
     theme-name
     ;; Modeline and powerline
     `(mode-line           ((,class (:foreground ,solarized-bg
                                                 :background "gray50" :box nil))))
     `(mode-line-inactive  ((,class (:foreground ,solarized-bg
                                                 :background "gray50" :box nil))))
     `(powerline-active1   ((,class (:background "gray25"))))
     `(powerline-inactive1 ((,class (:background "gray25"))))
     `(powerline-active2   ((,class (:background "gray40"))))
     `(powerline-inactive2 ((,class (:background "gray40"))))
     ;; Change some org faces
     `(org-document-title        ((,class (:foreground ,blue-hc :weight bold))))
     `(org-document-info         ((,class (:foreground ,blue-hc))))
     `(org-document-info-keyword ((,class (:foreground ,blue-lc))))
     ;; Autocomplete faces
     `(ac-candidate-face ((,class (:background ,solarized-hl :foreground ,yellow))))
     `(ac-selection-face ((,class (:background ,yellow-lc :foreground ,yellow-hc))))
     `(ac-candidate-mouse-face ((,class (:background ,yellow-hc :foreground ,yellow-lc))))
     `(ac-completion-face ((,class (:foreground ,solarized-emph :underline t))))
     `(ac-gtags-candidate-face ((,class (:background ,solarized-hl :foreground ,blue))))
     `(ac-gtags-selection-face ((,class (:background ,blue-lc :foreground ,blue-hc))))
     `(ac-yasnippet-candidate-face ((,class (:background ,solarized-hl :foreground ,orange))))
     `(ac-yasnippet-selection-face ((,class (:background ,orange-lc :foreground ,orange-hc))))
     ;; Linum & fringe
     `(linum  ((,class (:foreground ,solarized-comments :background ,solarized-bg))))
     `(fringe ((,class (:foreground ,solarized-comments :background ,solarized-bg))))

     ))
#+END_SRC

Define new theme (since definition occurs here it is loaded by default)
#+BEGIN_SRC emacs-lisp
  (deftheme sk-solarized-light)
  (create-solarized-theme 'light 'sk-solarized-light 'sk-solarized-childtheme)
#+END_SRC

** Default modes
*** CUA
#+BEGIN_SRC emacs-lisp
  (cua-mode t)
#+END_SRC

*** Undo tree
#+BEGIN_SRC emacs-lisp
  (require 'undo-tree)
  (global-undo-tree-mode 1)
#+END_SRC

*** Recentf
#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
#+END_SRC

*** Transparently open compressed files
#+BEGIN_SRC emacs-lisp
  (auto-compression-mode t)
#+END_SRC

*** Highlight matching parentheses when the point is on them.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0
        show-paren-style 'mixed)

  (require 'highlight-parentheses)
  (defun turn-on-highlight-parentheses-mode ()
    (highlight-parentheses-mode t))
  (define-global-minor-mode global-highlight-parentheses-mode
    highlight-parentheses-mode
    turn-on-highlight-parentheses-mode)
  (setq hl-paren-colors
        '("orange1" "yellow1" "greenyellow" "green1"
          "springgreen1" "cyan1" "slateblue1" "magenta1" "purple"))
  (global-highlight-parentheses-mode t)
#+END_SRC

*** Highlight everything strange
#+BEGIN_SRC emacs-lisp
  (setq whitespace-style '(face trailing lines-tail tabs)
        whitespace-line-column 80)
#+END_SRC

*** Show a column wise indicator
#+BEGIN_SRC emacs-lisp
  (require 'fill-column-indicator)
  (setq fci-rule-width 3)
  (setq-default fill-column 80)
#+END_SRC

*** Use space for tabulation
#+BEGIN_SRC emacs-lisp
  (set-default 'indent-tabs-mode nil)
#+END_SRC

*** Indicate empty lines
#+BEGIN_SRC emacs-lisp
  (set-default 'indicate-empty-lines t)
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp :tangle no
  (global-hl-line-mode t)
#+END_SRC
*** Auto revert buffer
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  ;; revert without asking
  (setq revert-without-query '(".*"))
#+END_SRC
*** Smartparens settings
#+BEGIN_SRC emacs-lisp
  (setq sp-ignore-modes-list '(calc-mode dired-mode ibuffer-mode
                                         minibuffer-incative-mode sr-mode))
#+END_SRC
** Setting default directories

[[http://www.emacswiki.org/emacs/SavePlace][SavePlace]] stores the position where the point was at the last visit of
a given file. =backup-directory-alist= is related to the directory
where emacs backup file will be stored.
#+BEGIN_SRC emacs-lisp
  (setq temporary-file-directory     (concat starter-kit-dir "tmp/"))
  (setq save-place-file              (concat temporary-file-directory "places"))
  (setq recentf-save-file            (concat temporary-file-directory "recentf"))
  (setq smex-save-file               (concat temporary-file-directory "smex-items"))
  (setq ido-save-directory-list-file (concat temporary-file-directory "ido.last"))
  (setq ac-comphist-file             (concat temporary-file-directory "ac-comphist.dat"))
  (setq auto-save-list-file-prefix   (concat temporary-file-directory "auto-save-list/" ".auto-saves-"))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  (setq backup-directory-alist         `(("." . ,(concat temporary-file-directory "backups"))))
#+END_SRC


Automatically save and restore sessions
#+BEGIN_SRC emacs-lisp
  (setq desktop-dirname             (concat temporary-file-directory "session")
        desktop-base-file-name      "emacs.desktop"
        desktop-base-lock-name      "lock"
        desktop-path                (list desktop-dirname)
        desktop-save                t
        desktop-files-not-to-save   "^$" ;reload tramp paths
        desktop-load-locked-desktop nil)
  (desktop-save-mode 0)
#+END_SRC

** UTF8 everywhere
#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system    'utf-8)
  (set-keyboard-coding-system    'utf-8)
  (prefer-coding-system          'utf-8)
  (set-buffer-file-coding-system 'utf-8)
#+END_SRC

** Magit settings
#+BEGIN_SRC emacs-lisp
  (require 'magit)
#+END_SRC
*** Do not show untracked material
#+BEGIN_SRC emacs-lisp
  (setq magit-omit-untracked-dir-contents 1)
#+END_SRC

*** Fullscreen magit-status
From [[http://whattheemacsd.com/setup-magit.el-01.html][Magnars blog]]
#+BEGIN_SRC emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  (define-key magit-status-mode-map (kbd "p") 'magit-push)
#+END_SRC
** Uniquify settings
Change buffer name in case of various same name buffer
previously : Makefile and Makefile<2>
now        : Makefile|directory1 Makefile|directory2
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse)
  (setq uniquify-separator "|")
  (setq uniquify-after-kill-buffer-p t) ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
#+END_SRC

** Dired customization
*** Using 'a' to open a directory in the same buffer
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternative-file 'disabled nil)
#+END_SRC

*** Make dired less verbose
#+BEGIN_SRC emacs-lisp
  (require 'dired-details)
  (setq-default dired-details-hidden-string "--- ")
  (dired-details-install)
#+END_SRC

*** Refresh also dired buffer
From [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars blog]]
#+BEGIN_SRC emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
#+END_SRC
** Ibuffer customization
Use human readable size column (from [[http://www.emacswiki.org/emacs/IbufferMode#toc12][coldnew]])
#+BEGIN_SRC emacs-lisp
  (define-ibuffer-column size-h
    (:name "Size")
    (cond
     ((> (buffer-size) 1000)    (format "%7.1fk" (/ (buffer-size) 1000.0)))
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     (t  (format "%8d" (buffer-size)))))

  (setq
   ibuffer-default-sorting-mode 'filename/process
   ibuffer-eliding-string "â€¦"
   ibuffer-compile-formats t
   ibuffer-formats '((mark modified read-only
                           " " (name 25 25 :left :elide)
                           " " (size-h 9 -1 :right)
                           " " (mode 7 7 :left :elide)
                           ;;" " (git-status 8 8 :left)
                           " " filename-and-process)
                     (mark " " (name 16 -1) " " filename))
   ibuffer-show-empty-filter-groups nil
   ibuffer-saved-filter-groups
   (quote (("default"
            ("c++" (mode . c++-mode))
            ("shell script" (mode . sh-mode))
            ("emacs lisp" (mode . emacs-lisp-mode))
            ("python" (mode . python-mode))
            ("LaTeX" (or
                      (mode . latex-mode)
                      (mode . LaTeX-mode)
                      (mode . tex-mode)))
            ("ruby" (mode . ruby-mode))
            ("java-script" (or
                            (mode . js-mode)
                            (mode . js2-mode)))
            ("java" (mode . java-mode))
            ("html" (or
                     (mode . html-mode)
                     (mode . web-mode)
                     (mode . haml-mode)))
            ("xml" (mode . nxml-mode))
            ("css" (mode . css-mode))
            ("org agenda"  (mode . org-agenda-mode))
            ("org" (or
                    (mode . org-mode)
                    (name . "^\\*Calendar\\*$")
                    (name . "^diary$")))
            ("text misc" (or
                          (mode . text-mode)
                          (mode . rst-mode)
                          (mode . markdown-mode)))
            ("w3m" (mode . w3m-mode))
            ("git" (or
                    (mode . magit-log-edit-mode)
                    (mode . magit-log)))
            ("dired" (mode . dired-mode))
            ("help" (or
                     (mode . Info-mode)
                     (mode . help-mode)
                     (mode . Man-mode)))
            ("*buffer*" (name . "\\*.*\\*"))))))
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
** Powerline
:PROPERTIES:
:CUSTOM_ID: powerline
:END:
#+BEGIN_SRC emacs-lisp
  (require 'powerline)
  (powerline-default)
#+END_SRC
** Diminish modeline clutter
#+BEGIN_SRC emacs-lisp
  (require 'diminish)
  ;;(diminish 'wrap-region-mode)
  (diminish 'yas/minor-mode)
#+END_SRC

** Buffer scrolling
Smooth keyboard scrolling
#+BEGIN_SRC emacs-lisp
  (setq
   redisplay-dont-pause t                 ;; scrolling
   scroll-step 1                          ;; scroll line per line (1 line instead of 3)
   scroll-margin 0                        ;; do smooth scrolling, ...
   scroll-conservatively 100000           ;; ... the defaults ...
   scroll-up-aggressively 0               ;; ... are very ...
   scroll-down-aggressively 0             ;; ... annoying
   auto-window-vscroll nil
   )
#+END_SRC

Use [[https://github.com/kiwanami/emacs-inertial-scroll][inertial-scroll]] for a really smooth scrolling when using mouse wheel and
next/prior keys.
#+BEGIN_SRC emacs-lisp
  (require 'inertial-scroll)
  (inertias-global-minor-mode 1)
  (setq inertias-rebound-flash nil
        inertias-initial-velocity-wheel 20)
  (global-set-key [(mouse-5)] 'inertias-up-wheel)
  (global-set-key [(mouse-4)] 'inertias-down-wheel)
  (global-set-key (kbd "<next>")  'inertias-up)
  (global-set-key (kbd "<prior>") 'inertias-down)
#+END_SRC

** Misc.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Footnotes

[1] [[http://whattheemacsd.com/init.el-01.html][Magnars]] suggests to place all the UI stuff deactivation
(=tool-bar=, =scroll-bar=) at the really beginning of the =init.el=
file. Not really conclusive especially when emacs server is used.
