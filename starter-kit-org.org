#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

** Org-Mode hooks
*** Keybindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key "\C-n" 'outline-next-visible-heading)
                (local-set-key "\C-p" 'outline-previous-visible-heading)
                (local-set-key "\C-u" 'outline-up-heading)
                ;; table
                (local-set-key "\M-\C-w" 'org-table-copy-region)
                (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
                (local-set-key "\M-\C-l" 'org-table-sort-lines)
                ;; display images
                (local-set-key "\M-I" 'org-toggle-inline-image)))
#+END_SRC

*** Minor mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode  t)
              (org-bullets-mode t)
              (auto-complete-mode t)
              (linum-mode -1)
              (diminish 'org-indent-mode)))
#+END_SRC

** Org-Mode keybindings
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (define-key org-mode-map (kbd "s-p") 'org-latex-export-to-pdf)
  (define-key org-mode-map (kbd "s-l") 'org-latex-export-to-latex)
  (define-key org-mode-map (kbd "s-h") 'org-html-export-to-html)
  (require 'ox-beamer)
  (define-key org-beamer-mode-map (kbd "s-p") 'org-beamer-export-to-pdf)
  (define-key org-beamer-mode-map (kbd "s-l") 'org-beamer-export-to-latex)
#+END_SRC

** Org-Mode settings
*** Ellipsis
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "…"
        org-columns-ellipses "…")
#+END_SRC

*** Using ido completing
#+BEGIN_SRC emacs-lisp
  (setq org-completion-use-ido t)
#+END_SRC

*** Use speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-use-speed-commands t)
#+END_SRC
*** Special word faces
#+BEGIN_SRC emacs-lisp :tangle no
  (defface my/highlight-face
    '((t (:weight normal :slant normal :box '(:line-width 1 :color "#CC0000")
                  :foreground "#CC0000" :background "#FFFF88")))
    "Face for making FIXME and other warnings stand out.")

  (defvar my/highlight-org-regexps
    "\\(FIXME\\|BUG\\|XXX\\|[Ee]rror\\|[Ww]arning\\|WARNING\\)"
    "Patterns to highlight (for Org mode only, to ensure no conflict with the
    Org mode TODO keyword).")

  ;; set up highlighting of special patterns for Org mode only
  (dolist (mode '(org-mode
                  orgtbl-mode))
    (font-lock-add-keywords mode
                            `((,my/highlight-org-regexps 1 'my/highlight-face
                                                         prepend))))
#+END_SRC
*** Turn on automatic renumbering of footnotes
#+BEGIN_SRC emacs-lisp
  (setq org-footnote-auto-adjust t)
#+END_SRC

** Code blocks
:PROPERTIES:
:CUSTOM_ID: babel
:END:
This activates a number of widely used languages, you are encouraged to activate
more languages using the customize interface for the =org-babel-load-languages=
variable, or with an elisp form like the one below.  The customize interface of
=org-babel-load-languages= contains an up to date list of the currently
supported languages.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (C . t)
     (python . t)
     (latex . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Code block fontification
:PROPERTIES:
:CUSTOM_ID: code-block-fontification
:END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively  t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

** LaTeX hacks
*** Use smart quote when exporting
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC
*** Keep LaTeX logfiles
#+BEGIN_SRC emacs-lisp
  (setq org-latex-remove-logfiles nil)
#+END_SRC
*** Default list of LaTeX packages
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "org-preamble"))
#+END_SRC

*** Defining org-latex classes
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
#+END_SRC
**** General article class
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass[11pt]{article}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** SuperNEMO DocDB template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("snemo-note"
                 "\\documentclass{scrartcl}
                  \\setkomafont{disposition}{\\normalfont\\bfseries}
                  [PACKAGES]
                  \\usepackage{supernemo-article-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Memoir article
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("memoir-article"
                 "\\documentclass[11pt,oneside,article]{memoir}
                  [PACKAGES]
                  \\usepackage{memoir-article-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+END_SRC

**** Beamer template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[c]{beamer}
                  [PACKAGES]
                  \\usepackage{custom-beamer}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** *bold* becomes =structure=
We also translate *bold* into beamer =structure=.
#+BEGIN_SRC emacs-lisp
  (defun sk-beamer-bold (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\structure" contents)))
  (defun sk-beamer-underline (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

  (add-to-list 'org-export-filter-bold-functions 'sk-beamer-bold)
  (add-to-list 'org-export-filter-underline-functions 'sk-beamer-underline)
#+END_SRC
***** Add =frame= option to footnote
#+BEGIN_SRC emacs-lisp
  (defun sk-beamer-footnote (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\footnote[frame]" contents)))
  (add-to-list 'org-export-filter-footnote-reference-functions 'sk-beamer-footnote)
#+END_SRC

***** Colored box environment
We define a new environment for "colored" box
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-beamer-environments-extra
               '("cbox" "c" "\\begin{cbox}%o(%h)" "\\end{cbox}"))
#+END_SRC

**** C++ lecture template
#+BEGIN_SRC emacs-lisp :results none
  (add-to-list 'org-latex-classes
               '("lecture"
                 "\\documentclass{report}
                  [PACKAGES]
                  \\usepackage{lecture-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

*** KOMA/LaTeX script
Define a special =org-latex-classes= to make use of KOMA/LaTeX letter
style. The =ox-koma-letter= backend from org-mode contribution directory must
be properly installed or loaded. To produce org-mode to LaTeX to PDF export,
you should use the =org-koma-letter-export-to-pdf= command.

#+BEGIN_SRC emacs-lisp
  (setq org-koma-letter-email  nil)
  (setq org-koma-letter-author nil)
  (add-to-list 'org-latex-classes
               '("koma-letter"
                 "\\documentclass{scrlttr2}
                  [NO-DEFAULT-PACKAGES]"))
#+END_SRC

*** Add new LATEX_CMD option to choose between =pdflatex= and =xelatex=
From [[http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export][org-faq]]
#+BEGIN_SRC emacs-lisp
    (defun sk-latexmk-cmd (backend)
      "When exporting from .org with latex, automatically run latex,
         pdflatex, or xelatex as appropriate, using latexmk."
      (when (org-export-derived-backend-p backend 'latex)
        (let ((texcmd)))
        ;; default command: xelatex
        (setq texcmd "jobname=$(basename %f | sed 's/\.tex//');latexmk -xelatex -shell-escape -quiet %f && mkdir -p latex.d && mv ${jobname}.* latex.d/. && mv latex.d/${jobname}.{org,tex,pdf,fdb_latexmk} .")
        ;; pdflatex -> .pdf
        (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
            (setq texcmd "latexmk -pdf -shell-escape -quiet %f"))
        ;; xelatex -> .pdf
        (if (string-match "LATEX_CMD: xelatex" (buffer-string))
            (setq texcmd "latexmk -xelatex -shell-escape -quiet %f"))
        ;; LaTeX compilation command
        (setq org-latex-pdf-process (list texcmd))))

    (org-add-hook 'org-export-before-processing-hook 'sk-latexmk-cmd)
#+END_SRC

# The pretty long command with symbolic link is because =minted= package does not
# play well with =-output-directoy= option. Even if a homemade version of [[https://github.com/xgarrido/minted][=minted=]]
# try to deal with that problem, there is still one remaining issue (see [[http://tex.stackexchange.com/questions/112953/error-when-using-minted-package-and-output-directory-option][this post
# forum]]). That is the reason for the symbolic link in the =.latex.d= directory.

*** Minted setup
#+BEGIN_SRC emacs-lisp :results silent
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(;;("frame" "lines")
          ("fontsize" "\\footnotesize")
          ("mathescape" "")
          ("samepage" "")
          ("xrightmargin" "0.5cm")
          ("xleftmargin"  "0.5cm")
          ))
#+END_SRC

*** Place table caption below table
#+BEGIN_SRC emacs-lisp
  (setq org-latex-table-caption-above nil)
#+END_SRC

** Prevent editing invisible text
The following setting prevents accidentally editing hidden text when
the point is inside a folded region. This can happen if you are in the
body of a heading and globally fold the org-file with =S-TAB=

I find invisible edits (and undo's) hard to deal with so now I can't
edit invisible text. =C-c C-r= (org-reveal) will display where the point
is if it is buried in invisible text to allow editing again.
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'error)
#+END_SRC

** Automatically renumber footnotes
#+BEGIN_SRC emacs-lisp
  (setq org-footnote-auto-adjust t)
#+END_SRC
** Org fold to store folding state
Stolen from [[https://github.com/dandavison/org-fold][Dan Davison]] git account. Just changing the directory where
the =.fold= file is saved.
#+BEGIN_SRC emacs-lisp
  (defun org-fold-get-fold-info-file-name ()
    (concat temporary-file-directory "org-fold/" (buffer-name) ".fold"))

  (defun org-fold-save ()
    (save-excursion
      (goto-char (point-min))
      (let (foldstates)
        (unless (looking-at outline-regexp)
          (outline-next-visible-heading 1))
        (while (not (eobp))
          (push (if (some (lambda (o) (overlay-get o 'invisible))
                          (overlays-at (line-end-position)))
                    t)
                foldstates)
          (outline-next-visible-heading 1))
        (with-temp-file (org-fold-get-fold-info-file-name)
          (prin1 (nreverse foldstates) (current-buffer))))))

  (defun org-fold-restore ()
    (save-excursion
      (goto-char (point-min))
      (let* ((foldfile (org-fold-get-fold-info-file-name))
             (foldstates
              (if (file-readable-p foldfile)
                  (with-temp-buffer
                    (insert-file-contents foldfile)
                    (read (current-buffer))))))
        (when foldstates
          (show-all)
          (goto-char (point-min))
          (unless (looking-at outline-regexp)
            (outline-next-visible-heading 1))
          (while (and foldstates (not (eobp)))
            (if (pop foldstates)
                (hide-subtree))
            (outline-next-visible-heading 1))
          (message "Restored saved folding state")))))

  (add-hook 'org-mode-hook 'org-fold-activate)

  (defun org-fold-activate ()
    (org-fold-restore)
    (add-hook 'before-save-hook 'org-fold-save        nil t)
    (add-hook 'auto-save-hook   'org-fold-kill-buffer nil t))

  (defun org-fold-kill-buffer ()
    ;; don't save folding info for unsaved buffers
    (unless (buffer-modified-p)
      (org-fold-save)))
#+END_SRC

** Function to generate all org table
From [[http://article.gmane.org/gmane.emacs.orgmode/64670][Carsten Dominik]]
#+BEGIN_SRC emacs-lisp
  (defun sk-org-send-all-tables ()
     (interactive)
     (org-table-map-tables
        (lambda () (orgtbl-send-table 'maybe))))
#+END_SRC

** Org capture
Emacs Org-mode has a feature called Org-capture that makes it easy to keep track
of all the to-do's that crop up as we work on projects.  With Org-capture you
can make comments across all your files and projects and link to them all from
one place.
*** Setting the TODO file location
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat starter-kit-dir "starter-kit-todo-list.org"))
#+END_SRC
*** Closing items
The most basic logging is to keep track of when a certain TODO item was
finished. This is achieved with
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC
** Org calendar synchronization with Google Agenda :DEPRECATED:
#+BEGIN_SRC emacs-lisp :tangle no
  ;; (add-to-list 'load-path (concat starter-kit-lisp-directory "org-caldav"))

  (setq org-caldav-calendar-id "dmpa69a5ajdi54dtl8jsdqcivs@group.calendar.google.com"
        org-caldav-url "https://www.google.com/calendar/dav";
        org-caldav-files '("~/Documents/Org/rdv.org")
        org-caldav-inbox "~/Documents/Org/inbox.org")
#+END_SRC
